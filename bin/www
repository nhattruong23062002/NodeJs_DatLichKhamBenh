#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("nodejs--n-t-t-nghi-p:server");
const socketIo = require("socket.io");
var http = require("http");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.NODE_ENV || "3333");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = socketIo(server, {
  cors: {
    origin: "*",
  },
});

const roomMessages = {};

io.on("connection", (socket) => {
  socket.on("joinRoom", ({ roomId }) => {
    socket.join(roomId);

    if (roomMessages[roomId] && roomMessages[roomId].length > 0) {
      // Gửi tin nhắn tạm thời cho admin khi họ tham gia vào phòng
      socket.emit("messageHistory", roomMessages[roomId]);
    }
  });

  socket.on("chat", ({ roomId, message }) => {
    const messageData = {
      content: message,
      roomId: roomId,
    };

    if (!roomMessages[roomId]) {
      roomMessages[roomId] = [];
    }
    roomMessages[roomId].push(messageData);

    io.to(roomId).emit("message", messageData);
  });

  socket.on("on-update", ({ roomId }) => {
    const updateData = {
      roomId: roomId,
    };
    io.emit("update", updateData);
  });

  socket.on("getRooms", () => {
    const rooms = socket.adapter.rooms;
    const roomList = [];
    for (const room of rooms.keys()) {
      if (room.includes("-44")) {
        roomList.push(room);
      }
    }
    socket.emit("roomList", roomList);
  });

  socket.on("disconnect", () => {
    console.log("User disconnected");
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
